<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="member">
	<select id="sequence" resultType="Long">
		select member_seq.nextval from dual
	</select>
	
	<select id="all" resultType="MemberDto">
		select 
			member_no, member_id, member_pw, member_department, member_name, 
           	member_resident_no, member_contact, member_email, member_post, 
           	member_address1, member_address2, member_rank, 
           	member_bank, member_bank_no, member_join, member_state 
    	from member
    	order by member_department ASC, member_name ASC

	</select>
	
	<select id="find" resultType = "MemberDto">
		select * from member where member_id = #{memberId}
	</select>
	
	<select id="searchInvitableContacts" resultType="MemberDto">
		select 
			m.member_no, m.member_id, m.member_pw, m.member_department, m.member_name,
			m.member_resident_no, m.member_contact, m.member_email, m.member_post,
			m.member_address1, m.member_address2, m.member_rank, m.member_bank,
			m.member_no, m.member_join, m.member_state
	    from member m
	    where m.member_no != #{myNo}
	      and not exists (
	          select 1
	          from room_user ru
	          where ru.room_no = #{roomNo}
	          and ru.member_no = m.member_no
	      )
	      and (
	          instr(m.member_name, #{search}) > 0
	          or instr(m.member_department, #{search}) > 0
	      )
	    order by m.member_department, m.member_name
	</select>
	
	<!-- 검색 없이 초대 가능한 전체 연락처 조회 -->
	<select id="selectInvitableContacts" resultType="MemberDto">
	    select 
	    	m.member_no, m.member_id, m.member_pw, m.member_department, m.member_name,
	    	m.member_resident_no, m.member_contact, m.member_email, m.member_post,
	    	m.member_address1, m.member_address2, m.member_rank, m.member_bank,
	    	m.member_bank_no, m.member_join, m.member_state
	    from member m
	    where m.member_no != #{myNo}
	      and not exists (
	          select 1
	          from room_user ru
	          where ru.room_no = #{roomNo}
	          and ru.member_no = m.member_no
	      )
	    order by m.member_department, m.member_name
	</select>
	
	
	<!-- 검색 -->
	<select id="search" resultType="MemberDto">
		select * from member
		where (member_name like concat('%', #{search}, '%') or
					member_department like concat('%', #{search}, '%'))
		order by member_department ASC, member_name ASC
	</select>
	
	<!-- 검색2 -->
	<select id="search2" resultType="MemberDto">
	select * from member
		where (
			member_name like '%' || #{search} || '%' 
			or member_department like '%' || #{search} || '%'
		)
		order by member_department asc, member_name asc
	</select>
	
	<insert id="join" >
		insert into member(
		member_no, member_id, member_pw, member_department, member_name, 
		member_resident_no, member_contact, member_email, member_post, 
		member_address1, member_address2,
		member_rank, member_bank, member_bank_no,  member_state
		) values(
		#{memberNo},
		#{memberId}, #{memberPw}, #{memberDepartment}, #{memberName}
		, #{memberResidentNo}, #{memberContact}, #{memberEmail}, #{memberPost}
		, #{memberAddress1}, #{memberAddress2}
		, #{memberRank}, #{memberBank}, #{memberBankNo}, #{memberState}
		)
	</insert>

	<select id="findByNo" resultType ="MemberDto">
		select * from member where member_no = #{memberNo}
	</select>
	<select id="findForDetail" resultType = "MemberDetailResponseVO">
		select
		member_no, member_id, member_department, member_name, member_contact, member_email,
		member_post, member_address1, member_address2, member_rank, member_bank, member_bank_no,
		member_join, member_state
		from member where member_no = #{memberNo}
	</select>
	
	
	<delete id="remove" >
		delete member where member_no = #{memberNo}
	</delete>
	<select id="departments"  resultType="String">
		select member_department from member group by member_department
	</select>
	
	<select id="integratedList" resultType = "AdminMemberListVO">
	<include refid="top-n-header"></include>
	<!-- 	select member_id, member_name, member_department, member_rank, member_contact, member_email, member_join
		 from member  -->
		  select * from member		 
		  
		 <include refid = "condition"></include>
		
	
		order by 
		<if test="order != null">
		    <choose>
		      <when test="order == 'memberJoin'">member_join asc,</when>
        <when test="order == 'memberName'">member_name asc,</when>
		     </choose> 
		
		</if> 
		member_department asc
		
	<include refid = "top-n-footer"></include>
	</select>
	
	<select id="count" resultType="Int">
		select count(*) from member <include refid="condition"></include>
	</select>
	 
	 
	 <update id="editAll">
	 	update member set 
	 	member_name = #{memberName}, member_department = #{memberDepartment}, member_rank = #{memberRank}, member_contact = #{memberContact},
	 	member_email = #{memberEmail}, member_bank = #{memberBank}, member_bank_no = #{memberBankNo} where member_no = #{memberNo}
	 </update>
	 
<update id="editPart" parameterType="MemberDto">
    update member
    <set>
        <if test="memberName != null">member_name = #{memberName},</if>
        <if test="memberDepartment != null">member_department = #{memberDepartment},</if>
        <if test="memberRank != null">member_rank = #{memberRank},</if>
        <if test="memberContact != null">member_contact = #{memberContact},</if>
        <if test="memberEmail != null">member_email = #{memberEmail},</if>
        <if test="memberBank != null">member_bank = #{memberBank},</if>
        <if test="memberBankNo != null">member_bank_no = #{memberBankNo},</if>
    </set>
    where member_no = #{memberNo}
</update>
	 <update id="resetPw" >
	 	update member set member_pw = #{memberPw} where member_no = #{memberNo}
	 </update>
	 
	 
	 
	 
	 
	 
	 
	 
	 
	
	<sql id="top-n-header">
		<if test="beginRow != null and endRow != null">
		select * from (
			select rownum rn, TMP.* from(
		</if>
	</sql>
	<sql id="top-n-footer">
		<if test="beginRow != null and endRow != null">
			)TMP
		)where rn between #{beginRow} and #{endRow}	
		</if>
	</sql>
	
	<sql id="condition">
  <where>
	   <choose>
	    <when test="column == 'member_name'">
	        AND member_name = #{keyword}
	    </when>
	    <when test="column == 'member_id'">
	        AND member_id = #{keyword}
	    </when>
	    <when test="column == 'member_department'">
	        AND member_department = #{keyword}
	    </when>
	    <when test="column == 'member_rank'">
	        AND member_rank = #{keyword}
	    </when>
	    <when test="column == 'member_contact'">
	        AND member_contact = #{keyword}
	    </when>
	    <when test="column == 'member_email'">
	        AND member_email = #{keyword}
	    </when>
   
</choose>
    </where> 
	</sql>
	

	
	
	
</mapper>


































