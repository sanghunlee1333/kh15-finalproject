<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 채팅방 테이블과 참여자 테이블에 대한 매퍼(room, room_user) -->
<mapper namespace="room">
	
	<!-- 채팅방 번호 시퀀스 -->
	<select id="sequence" resultType="long">
		select room_seq.nextval from dual
	</select>
	
	<!-- 채팅방 생성 -->
	<insert id="insert">
		insert into room(room_no, room_title, room_owner)
		values(
			#{roomNo}, #{roomTitle}, #{roomOwner}
		)
	</insert>
	
	<!-- 채팅방 목록 조회 (현재 로그인한 사용자가 속한 방만) -->
	<select id="listByMember" resultType="RoomListVO">
	    select
	        r.room_no as roomNo,
	        r.room_title as roomTitle,
	        r.room_owner as roomOwner,
	        rc.room_chat_content as lastMessage,
	        rc.room_chat_time as lastMessageTime,
	        (
	            select count(*)
	            from room_chat rc2
	            where rc2.room_chat_origin = r.room_no
	            and rc2.room_chat_time > nvl((
	                select ru2.last_read_time
	                from room_user ru2
	                where ru2.room_no = r.room_no
	                and ru2.member_no = #{memberno}
	            ), to_timestamp('1900-01-01 00:00:00', 'yyyy-mm-dd hh24:mi:ss'))
	        ) as unreadcount
	    from room r
	    join room_user ru on ru.room_no = r.room_no
	    left join (
	        select *
	        from (
	            select rc.*
	            from room_chat rc
	            join (
	                select room_chat_origin, max(room_chat_time) as max_time
	                from room_chat
	                group by room_chat_origin
	            ) latest
	            on rc.room_chat_origin = latest.room_chat_origin
	            and rc.room_chat_time = latest.max_time
	        )
	    ) rc on rc.room_chat_origin = r.room_no
	    where ru.member_no = #{memberNo}
	    order by lastMessageTime desc nulls last
	</select>

	<!-- 특정 채팅방 조회 -->
	<select id="find" resultType="RoomDto">
		select room_no, room_title, room_owner
		from room
		where room_no = #{roomNo}
	</select>
	
	<!-- 채팅방 삭제 -->
	<delete id="delete">
		delete from room where room_no = #{roomNo}
	</delete>
	
	<!-- 채팅방 입장 -->
	<insert id="enter">
		insert into room_user(room_no, member_no)
		values(
			#{roomNo}, #{memberNo}
		)
	</insert>
	
	<!-- 채팅방 중복 입장 방지 -->
	<select id="check" resultType="int">
		select count(*) from room_user
		where room_no = #{roomNo} and member_no = #{memberNo}
	</select>
	
	<!-- 채팅방의 모든 유저 조회 -->
	<select id="getUsers" resultType="UserVO">
		select
            member.member_no as memberNo, 
            member.member_name as memberName, 
            member.member_department as memberDepartment
        from room_user, member
        where room_user.member_no = member.member_no
        and room_user.room_no = #{roomNo}
        order by member.member_name asc
	</select>
	
	<!-- 채팅방 나가기 -->
	<delete id="leave">
		delete from room_user
		where room_no = #{roomNo} and member_no = #{memberNo}
	</delete>
	
	<!-- 채팅 읽음 처리 -->
	<update id="updateReadTime">
		update room_user
		set last_read_time = systimestamp
		where room_no = #{roomNo}
		and member_no = #{memberNo}
	</update>
	
	<!-- 채팅방 멤버 추가 -->
	<insert id="addMembers" parameterType="map">
	  <foreach collection="memberNos" item="memberNo" separator=";">
	    insert into room_user(room_no, member_no)
	    values (#{roomNo}, #{memberNo})
	  </foreach>
	</insert>

	
	<select id="getJoinTime" resultType="java.time.LocalDateTime">
		select join_time from room_user
		where room_no = #{roomNo} and member_no = #{memberNo}
	</select>
	
</mapper>
