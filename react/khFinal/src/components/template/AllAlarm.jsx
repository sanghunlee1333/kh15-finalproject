import axios from "axios";
import { toast } from "react-toastify";
import dayjs from 'dayjs';

import { useCallback, useState, useEffect } from "react";
import { FaLightbulb, FaTrash } from "react-icons/fa";
import { unReadAlarmCountState } from "../utils/alarm";
import { useRecoilValue, useSetRecoilState } from "recoil";
import { refreshPlanEventsState } from "../utils/plan";

export default function AllAlarm() {
    //recoil
    const fetchAllEvents = useRecoilValue(refreshPlanEventsState);

    //state
    const [alarms, setAlarms] = useState([]);
    const setUnReadAlarmCount = useSetRecoilState(unReadAlarmCountState);

    useEffect(() => {
        console.log("ÏïåÎ¶º ÏàòÏã†:", alarms);
      }, [alarms]);

    //callback
    //ÏïåÎ¶º Î∂àÎü¨Ïò§Í∏∞
    const loadAlarm = useCallback(async ()=>{
        const token = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");
        const resp = await axios.get("/alarm/", {
            headers: {
                Authorization: `Bearer ${token}`
            }
        });

        console.log("üì• ÏµúÏã† ÏÑúÎ≤Ñ ÏùëÎãµ:", resp.data);
        const withZeroPlan = resp.data.filter(alarm =>
          alarm.alarmPlanNo === 0 || alarm.alarmReceiverNo === 0 || alarm.alarmSenderNo === 0
        );
        if (withZeroPlan.length > 0) {
          console.warn("‚ùó ÏûòÎ™ªÎêú ÏïåÎ¶ºÏù¥ Ìè¨Ìï®Îê®:", withZeroPlan);
        }


        setAlarms(resp.data);
    }, []);

    //ÏïåÎ¶º ÏÇ≠Ï†ú(1Í∞ú)
    const deleteAlarm = useCallback(async (alarmNo)=>{
        await axios.delete(`/alarm/${alarmNo}`)
            .then(()=>{
                toast.success("ÏïåÎ¶ºÏùÑ ÏÇ≠Ï†úÌñàÏäµÎãàÎã§.");
            }
        );
        setAlarms(prev=>prev.filter(alarm => alarm.alarmNo !== alarmNo));
    }, []);

    //ÏïåÎ¶º ÏÇ≠Ï†ú(Ï†ÑÏ≤¥)
    const deleteAllAlarms = useCallback(async ()=>{
        await axios.delete("/alarm/all")
            .then(()=>{
                toast.success("ÏïåÎ¶ºÏùÑ ÏÇ≠Ï†úÌñàÏäµÎãàÎã§.");
            }
        );
        setAlarms([]);
    }, []);

    //ÏïåÎ¶º ÏàòÎùΩ/Í±∞Ï†à
    const responseAlarm = useCallback(async (planNo, receiverNo, alarmNo, accepted) => {
        const token = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");
        //1. ÏùëÎãµ API Ìò∏Ï∂ú
        await axios.patch(`/plan/receive/planNo/${planNo}/receiverNo/${receiverNo}/response` , {
            planStatus: accepted ? "Y" : "N"
        } , {
            headers: {
                Authorization: `Bearer ${token}`
            }
        }).then(()=>{
                toast.success(accepted ? "ÏùºÏ†ïÏùÑ ÏàòÎùΩÌñàÏäµÎãàÎã§." : "ÏùºÏ†ïÏùÑ Í±∞Ï†àÌñàÏäµÎãàÎã§.");
        });
        //2. Ìï¥Îãπ ÏïåÎ¶º ÏÇ≠Ï†ú API Ìò∏Ï∂ú
        await axios.delete(`/alarm/${alarmNo}`);

        //3. UIÏóêÏÑú Ï†úÍ±∞
        setAlarms(prev=>prev.filter(alarm=>alarm.alarmNo !== alarmNo));

        //4. ÏùºÏ†ï ÏàòÎùΩ ÏãúÏóêÎßå ÏÉàÎ°úÍ≥†Ïπ®
        if(accepted && typeof fetchAllEvents === "function") {
            const now = new Date();
            fetchAllEvents(now.getFullYear(), now.getMonth() + 1);
        }
    }, [fetchAllEvents]);

    useEffect(()=>{
        loadAlarm();
        setUnReadAlarmCount(0); //ÏùΩÏùå Ï≤òÎ¶¨
    }, []);

    //view
    return (<>
        <div className="row mt-2">
            <div className="col">
                <div className="d-flex align-items-center justify-content-between">
                    <div className="d-flex align-items-center">
                        <h2>
                            <FaLightbulb className="text-warning me-1" />
                            <span className="align-middle">ÏïåÎ¶º</span>
                        </h2>
                    </div>
                    <button className="btn btn-outline-danger text-responsive" onClick={deleteAllAlarms}>Ï†ÑÏ≤¥ ÏÇ≠Ï†ú</button>
                </div>
            </div>
        </div>

        <hr className="hr-stick" />

        <div className="row">
            <div className="col">
                <div className="border border-dark rounded p-3 mb-2 hover-shadow">
                    {alarms.length === 0 ? (
                        <div className="border rounded p-3 mb-2 hover-shadow text-responsive">ÏÉàÎ°úÏö¥ ÏïåÎ¶ºÏù¥ ÏóÜÏäµÎãàÎã§.</div>
                    ) : (
                        alarms.map(alarm => (
                        <div key={alarm.alarmNo} className="border border-secondary d-flex align-items-center justify-content-between 
                                rounded p-3 mb-2 hover-shadow text-responsive">
                            <div>
                                <div className="text-bold">{alarm.alarmMessage}</div>
                                {alarm.planTitle
                                    ? <div className="text-muted">{alarm.planTitle}</div>
                                    : <div className="text-muted text-danger">[ÏÇ≠Ï†úÎêú ÏùºÏ†ï]</div>
                                }
                                <div className="text-muted">{dayjs(alarm.planStartTime).format("YYYY-MM-DD HH:mm")} ~ {dayjs(alarm.planEndTime).format("YYYY-MM-DD HH:mm")}</div>
                            </div>
                            <div className="d-flex">
                                {/* ÏàòÎùΩ/Í±∞Ï†àÏù¥ ÌïÑÏöîÌïú ÏïåÎ¶ºÏùº Í≤ΩÏö∞ */}
                                {(alarm.alarmType === "PLAN_CREATE") && (
                                    <>
                                        <button className="btn btn-outline-success" onClick={()=>responseAlarm(alarm.alarmPlanNo, alarm.alarmReceiverNo, alarm.alarmNo, true)}>
                                            ÏàòÎùΩ
                                        </button>
                                        <button className="btn btn-outline-danger ms-2" onClick={()=>responseAlarm(alarm.alarmPlanNo, alarm.alarmReceiverNo, alarm.alarmNo, false)}>
                                            Í±∞Ï†à
                                        </button>
                                    </>
                                )}
                                <button className="btn ms-2">
                                    <FaTrash className="text-danger" onClick={()=>deleteAlarm(alarm.alarmNo)}/>
                                </button>
                            </div>
                        </div>
                        ))
                    )}
                </div>
            </div>
        </div>

    </>);
}